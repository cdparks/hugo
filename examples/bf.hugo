Machine:
    Instruction pointer is at 0
    Memory pointer is at 1
    Braces stack is at 2
    Program begins at 3
    BF memory begins after program

Save beginning of program as initial instruction pointer
0 3 0 $ 1 +

-- Start of read loop --

Read one byte into current program slot
1 1 , 0 & $ +

If byte is -1, program is completely read, jump to 4
2 0 1 - 0 & & = 1 + +

Otherwise, increment program counter, jump back to 1
3 0 & 1 + 0 $ 2 -

Program is read. Save program counter + 1 as start of bf memory
4 1 0 & 1 + 1 $ +

-- End of read loop --

Reset program counter
5 2 0 $ 19 +

Increment program counter
24 1 0 & 1 + 0 $ +

Reset braces stack to 1 and jump to 6
25 19 1 2 $ -

-- Start of execution loop --

Increment? +
6 1 0 & & 43 = + +

    Increment current memory contents
    8 16 1 & & 1 + 1 & $ +

Decrement? -
7 2 0 & & 45 = + +

    Decrement current memory contents
    10 14 1 & & 1 - 1 & $ +

Right? >
9 2 0 & & 62 = + +

    Advance memory pointer to right
    12 12 1 & 1 + 1 $ +

Left? <
11 2 0 & & 60 = + +

    Advance memory pointer to left
    14 10 1 & 1 - 1 $ +

Enter loop? [
13 2 0 & & 91 = + +

    If current memory contents are zero ...
    16 24 1 & & 0 = + +

        -- Find the matching ] --

        While the braces stack is nonzero
        41 2 2 & 0 = + +

            Increment program counter
            43 2 0 & 1 + 0 $ +

            Mutate braces stack by current instruction
            45 4 2 & 0 & & 93 = 0 & & 91 = - - 2 $ -

        Then jump back to 24
        44 20 -

    Otherwise, enter the loop by jumping back to 24
    40 16 -

Jump back? ]
15 2 0 & & 93 = + +

    If current memory contents are non zero ...
    18 36 1 & & 0 = + +

        -- Find the matching [ --

        While the braces stack is nonzero
        54 2 2 & 0 = + +

            Decrement program counter
            56 2 0 & 1 - 0 $ +

            Mutate braces stack by current instruction
            58 4 2 & 0 & & 93 = 0 & & 91 = - + 2 $ -

        Then jump back to 24
        57 33 -

    Otherwise, contine by jumping back to 24
    55 31 -

Write? .
17 2 0 & & 46 = + +

    Write current memory contents to stdout
    20 4 1 & & . +

Read? ,
19 2 0 & & 44 = + +

    Read stdin to current memory
    22 2 , 1 & & $ +

Negative 1 is EOF after program
21 11 0 & & 0 1 - = + +

    Matched -1. Halt
    33 1 +

Any other character. Skip and go back to 24
32 8 -

-- End of execution loop --

